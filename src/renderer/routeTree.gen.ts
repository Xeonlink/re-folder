/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as IndexImport } from "./routes/index"
import { Route as WatchersWatcherIdIndexImport } from "./routes/watchers/$watcherId/index"
import { Route as RulesRuleIdIndexImport } from "./routes/rules/$ruleId/index"

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const WatchersWatcherIdIndexRoute = WatchersWatcherIdIndexImport.update({
  path: "/watchers/$watcherId/",
  getParentRoute: () => rootRoute,
} as any)

const RulesRuleIdIndexRoute = RulesRuleIdIndexImport.update({
  path: "/rules/$ruleId/",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/rules/$ruleId/": {
      id: "/rules/$ruleId/"
      path: "/rules/$ruleId"
      fullPath: "/rules/$ruleId"
      preLoaderRoute: typeof RulesRuleIdIndexImport
      parentRoute: typeof rootRoute
    }
    "/watchers/$watcherId/": {
      id: "/watchers/$watcherId/"
      path: "/watchers/$watcherId"
      fullPath: "/watchers/$watcherId"
      preLoaderRoute: typeof WatchersWatcherIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/rules/$ruleId": typeof RulesRuleIdIndexRoute
  "/watchers/$watcherId": typeof WatchersWatcherIdIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/rules/$ruleId": typeof RulesRuleIdIndexRoute
  "/watchers/$watcherId": typeof WatchersWatcherIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/rules/$ruleId/": typeof RulesRuleIdIndexRoute
  "/watchers/$watcherId/": typeof WatchersWatcherIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/rules/$ruleId" | "/watchers/$watcherId"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/rules/$ruleId" | "/watchers/$watcherId"
  id: "__root__" | "/" | "/rules/$ruleId/" | "/watchers/$watcherId/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RulesRuleIdIndexRoute: typeof RulesRuleIdIndexRoute
  WatchersWatcherIdIndexRoute: typeof WatchersWatcherIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RulesRuleIdIndexRoute: RulesRuleIdIndexRoute,
  WatchersWatcherIdIndexRoute: WatchersWatcherIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/rules/$ruleId/",
        "/watchers/$watcherId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/rules/$ruleId/": {
      "filePath": "rules/$ruleId/index.tsx"
    },
    "/watchers/$watcherId/": {
      "filePath": "watchers/$watcherId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
